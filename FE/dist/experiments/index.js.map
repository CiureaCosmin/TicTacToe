{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/experiments/index.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,OAAO,EAAE,aAAa,EAAE,OAAO,EAAC,MAAM,cAAc,CAAC;AAC7D,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE3C,MAAM,SAAS,GAAG,aAAa,CAAS,UAAU,CAAC,CAAC;AAEpD,MAAM,SAAU,SAAQ,UAAU;IAAlC;;QAUS,aAAQ,GAAG,MAAM,CAAC;IAgB3B,CAAC;IAdC,wDAAwD;IAC/C,MAAM;QACb,OAAO,IAAI,CAAA;;0BAEW,IAAI,CAAC,aAAa;;;KAGvC,CAAC;IACJ,CAAC;IAEO,aAAa;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;QAC5D,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;;AAxBe,gBAAM,GAAG,GAAG,CAAA;;;;;GAK3B,AALqB,CAKpB;AAIK;IAFN,OAAO,CAAC,EAAC,OAAO,EAAE,SAAS,EAAC,CAAC;IAC7B,QAAQ,CAAC,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC;2CACJ;AAkB3B,MAAM,cAAe,SAAQ,UAAU;IAY7B,OAAO;QACb,IAAI,CAAC,QAAQ;YACX,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC;YAC9C,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IACD,kDAAkD;IACzC,MAAM;QACb,OAAO,IAAI,CAAA;;0BAEW,IAAI,CAAC,OAAO;;KAEjC,CAAC;IACJ,CAAC;;AAvBe,qBAAM,GAAG,GAAG,CAAA;;;;;GAK3B,CAAC;AAIK;IAFN,OAAO,CAAC,EAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;IAC9C,QAAQ,CAAC,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC;gDACJ;AAiB3B,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;AAC/C,cAAc,CAAC,MAAM,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAC","sourcesContent":["import {consume, createContext, provide} from '@lit/context';\r\nimport {LitElement, html, css} from 'lit';\r\nimport {property} from 'lit/decorators.js';\r\n\r\nconst myContext = createContext<string>('context2');\r\n\r\nclass MyElement extends LitElement {\r\n  static override styles = css`\r\n    :host {\r\n      display: block;\r\n      margin-top: 20px;\r\n    }\r\n  `;\r\n\r\n  @provide({context: myContext})\r\n  @property({attribute: false})\r\n  public context2 = 'true';\r\n\r\n  // Use the context provider to provide the boolean value\r\n  override render() {\r\n    return html`\r\n      <div>\r\n        <button @click=\"${this.toggleContext}\">Toggle Context</button>\r\n        <my-child-element></my-child-element>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private toggleContext() {\r\n    this.context2 = this.context2 === 'true' ? 'false' : 'true';\r\n    console.log('Context Value:', this.context2);\r\n  }\r\n}\r\n\r\nclass MyChildElement extends LitElement {\r\n  static override styles = css`\r\n    :host {\r\n      display: block;\r\n      margin-top: 10px;\r\n    }\r\n  `;\r\n\r\n  @consume({context: myContext, subscribe: true})\r\n  @property({attribute: false})\r\n  public context2?: string;\r\n\r\n  private doThing() {\r\n    this.context2\r\n      ? console.log('Context Value:', this.context2)\r\n      : console.log('wtf');\r\n  }\r\n  // Consume the context to access the boolean value\r\n  override render() {\r\n    return html`\r\n      <div>\r\n        <button @click=\"${this.doThing}\">Do Thing</button>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ncustomElements.define('my-element', MyElement);\r\ncustomElements.define('my-child-element', MyChildElement);\r\n"]}