{"version":3,"file":"IUserInterface.js","sourceRoot":"","sources":["../../src/Contexts/IUserInterface.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,EAAE,IAAI,MAAM,EAAC,MAAM,MAAM,CAAC;AAOlC,MAAM,OAAO,IAAI;IAKf;QACE,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,2BAA2B,EAAE;gBACxD,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;iBACnC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAC,CAAC;aAC1C,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC1C,CAAC;YACD,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC3C,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACtC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAEO,SAAS;QACf,6CAA6C;QAC7C,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC9D,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,MAAM,EAAE,CAAC;YACX,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,OAAO;QACT,CAAC;QACD,IAAI,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC;QACvB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,WAAW,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IAC7D,CAAC;IACD,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;CACF","sourcesContent":["import {v4 as uuidv4} from 'uuid';\r\n\r\ninterface IUserInterface {\r\n  name: string;\r\n  symbol: string;\r\n  gameId: string;\r\n}\r\nexport class User implements IUserInterface {\r\n  name: string;\r\n  symbol: string;\r\n  gameId: string;\r\n\r\n  constructor() {\r\n    this.name = '';\r\n    this.symbol = '';\r\n    this.gameId = '';\r\n    this.getResponse();\r\n  }\r\n\r\n  public async getResponse(): Promise<void> {\r\n    this.setGameId();\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({data: this.gameId}),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch data');\r\n      }\r\n      const responseText = await response.json();\r\n      this.setSymbol(responseText.symbol);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  }\r\n\r\n  private setGameId() {\r\n    //check first if there is a gameId in the url\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const gameId = urlParams.get('gameId');\r\n    if (gameId) {\r\n      this.gameId = gameId;\r\n      return;\r\n    }\r\n    this.gameId = uuidv4();\r\n    window.history.pushState({}, '', `?gameId=${this.gameId}`);\r\n  }\r\n  setSymbol(symbol: string) {\r\n    this.symbol = symbol;\r\n  }\r\n}\r\n"]}